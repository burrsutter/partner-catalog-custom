apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  annotations:
    build.appstudio.redhat.com/commit_sha: '{{revision}}'
    build.appstudio.redhat.com/target_branch: '{{target_branch}}'
    pipelinesascode.tekton.dev/max-keep-runs: "3"
    pipelinesascode.tekton.dev/on-event: '[push]'
    pipelinesascode.tekton.dev/on-target-branch: '[main]'
  creationTimestamp: null
  labels:
    appstudio.openshift.io/application: partner-catalog-custom
    appstudio.openshift.io/component: partner-catalog-custom-l7yz
    pipelines.appstudio.openshift.io/type: build
  name: partner-catalog-custom-l7yz-on-push
  namespace: burrsitis-tenant
spec:
  params:
  - name: dockerfile
    value: https://raw.githubusercontent.com/devfile-samples/devfile-sample-java-springboot-basic/main/docker/Dockerfile
  - name: git-url
    value: '{{repo_url}}'
  - name: output-image
    value: quay.io/redhat-user-workloads/burrsitis-tenant/partner-catalog-custom/partner-catalog-custom-l7yz:{{revision}}
  - name: path-context
    value: .
  - name: revision
    value: '{{revision}}'
  pipelineSpec:
    finally:
    - name: show-sbom
      params:
      - name: IMAGE_URL
        value: $(tasks.build-container.results.IMAGE_URL)
      taskRef:
        bundle: quay.io/redhat-appstudio-tekton-catalog/task-show-sbom:0.1@sha256:050bab50254e0377c68d63b6b679decfc655e30cad9ce4b0407fc8468852008d
        name: show-sbom
    - name: show-summary
      params:
      - name: pipelinerun-name
        value: $(context.pipelineRun.name)
      - name: git-url
        value: $(tasks.clone-repository.results.url)?rev=$(tasks.clone-repository.results.commit)
      - name: image-url
        value: $(params.output-image)
      - name: build-task-status
        value: $(tasks.build-container.status)
      taskRef:
        bundle: quay.io/redhat-appstudio-tekton-catalog/task-summary:0.1@sha256:9e21e57456c026c15765db23b986e47fc1394fa5d4823d3038b697971dd1a2bd
        name: summary
    params:
    - description: Source Repository URL
      name: git-url
      type: string
    - default: ""
      description: Revision of the Source Repository
      name: revision
      type: string
    - description: Fully Qualified Output Image
      name: output-image
      type: string
    - default: .
      description: The path to your source code
      name: path-context
      type: string
    - default: Dockerfile
      description: Path to the Dockerfile
      name: dockerfile
      type: string
    - default: "false"
      description: Force rebuild image
      name: rebuild
      type: string
    - default: "false"
      description: Skip checks against built image
      name: skip-checks
      type: string
    - default: "false"
      description: Execute the build with network isolation
      name: hermetic
      type: string
    - default: ""
      description: Build dependencies to be prefetched by Cachi2
      name: prefetch-input
      type: string
    - default: "false"
      description: Java build
      name: java
      type: string
    - default: ""
      description: Snyk Token Secret Name
      name: snyk-secret
      type: string
    results:
    - description: ""
      name: IMAGE_URL
      value: $(tasks.build-container.results.IMAGE_URL)
    - description: ""
      name: IMAGE_DIGEST
      value: $(tasks.build-container.results.IMAGE_DIGEST)
    - description: ""
      name: CHAINS-GIT_URL
      value: $(tasks.clone-repository.results.url)
    - description: ""
      name: CHAINS-GIT_COMMIT
      value: $(tasks.clone-repository.results.commit)
    - description: ""
      name: JAVA_COMMUNITY_DEPENDENCIES
      value: $(tasks.build-container.results.JAVA_COMMUNITY_DEPENDENCIES)
    tasks:
    - name: init
      params:
      - name: image-url
        value: $(params.output-image)
      - name: rebuild
        value: $(params.rebuild)
      - name: skip-checks
        value: $(params.skip-checks)
      - name: pipelinerun-name
        value: $(context.pipelineRun.name)
      - name: pipelinerun-uid
        value: $(context.pipelineRun.uid)
      taskRef:
        bundle: quay.io/redhat-appstudio-tekton-catalog/task-init:0.1@sha256:8c06b307b7f74622503b80ff0b81ffda63129959f52f8ed8f753d8ab98f38411
        name: init
    - name: clone-repository
      params:
      - name: url
        value: $(params.git-url)
      - name: revision
        value: $(params.revision)
      runAfter:
      - init
      taskRef:
        bundle: quay.io/redhat-appstudio-tekton-catalog/task-git-clone:0.1@sha256:458f4853a01c3273bd76076ac1b015d5f901e70fb4b776f788b577adb25bf5f8
        name: git-clone
      when:
      - input: $(tasks.init.results.build)
        operator: in
        values:
        - "true"
      workspaces:
      - name: output
        workspace: workspace
      - name: basic-auth
        workspace: git-auth
    - name: prefetch-dependencies
      params:
      - name: input
        value: $(params.prefetch-input)
      runAfter:
      - clone-repository
      taskRef:
        bundle: quay.io/redhat-appstudio-tekton-catalog/task-prefetch-dependencies:0.1@sha256:609f5c2a0d72dddb193a0fc2aef2390601172d09f093deadfb9827e28e8dea30
        name: prefetch-dependencies
      when:
      - input: $(params.hermetic)
        operator: in
        values:
        - "true"
      workspaces:
      - name: source
        workspace: workspace
    - name: trusted-content
      taskSpec:
        results:
        - name: CVE_SCAN_RESULT
          description: trusted content scan result
        - name: TEST_OUTPUT
          description: trusted content output
        workspaces:
          - name: source
        steps:
          - name: run-redhat-crda-scan-step
            image: quay.io/lrangine/crda-maven:11.0
            workingDir: "$(workspaces.source.path)"
            env:
              - name: AUTH_TOKEN
                valueFrom:
                  secretKeyRef:
                    name: crda-scan-secrets
                    key: AUTH_TOKEN
              - name: CONSENT_TELEMETRY
                value: "false"
              - name: CRDA_KEY
                valueFrom:
                  secretKeyRef:
                    name: crda-scan-secrets
                    key: CRDA_KEY
              - name: HOST
                valueFrom:
                  secretKeyRef:
                    name: crda-scan-secrets
                    key: HOST
            script: |
              #!/usr/bin/env bash
              echo 'ready to scan'
              /crda.sh pom.xml crda_scan_output.json
              echo 'CRDA Scan is completed'
              echo 'Printing scan results'
              more crda_scan_output.json
              echo 'Formatting the Task Results'
              jq -rce \
              '{vulnerabilities:{
              critical: (.report."critical_vulnerabilities"),
              high: (.report."high_vulnerabilities"),
              medium: (.report."medium_vulnerabilities"),
              low: (.report."low_vulnerabilities")
              }}' crda_scan_output.json | tee $(results.CVE_SCAN_RESULT.path)
              NOTE="Task $(context.task.name) completed: Refer to Tekton task result CVE_SCAN_RESULT for vulnerabilities scanned by RHTC."
              TEST_OUTPUT="SUCCESS $NOTE"
              echo "${TEST_OUTPUT}" | tee $(results.TEST_OUTPUT.path)
      runAfter:
        - clone-repository
      workspaces:
      - name: source
        workspace: workspace
    - name: build-container
      params:
      - name: IMAGE
        value: $(params.output-image)
      - name: DOCKERFILE
        value: $(params.dockerfile)
      - name: CONTEXT
        value: $(params.path-context)
      - name: DOCKER_AUTH
        value: $(tasks.init.results.container-registry-secret)
      - name: HERMETIC
        value: $(params.hermetic)
      - name: PREFETCH_INPUT
        value: $(params.prefetch-input)
      runAfter:
      - prefetch-dependencies
      taskRef:
        bundle: quay.io/redhat-appstudio-tekton-catalog/task-buildah:0.1@sha256:f4c4c211a7b8c859fb23d9b01faaf1a995a33b243476a617370e35f6438096e0
        name: buildah
      when:
      - input: $(tasks.init.results.build)
        operator: in
        values:
        - "true"
      workspaces:
      - name: source
        workspace: workspace
    - name: inspect-image
      params:
      - name: IMAGE_URL
        value: $(tasks.build-container.results.IMAGE_URL)
      - name: IMAGE_DIGEST
        value: $(tasks.build-container.results.IMAGE_DIGEST)
      - name: DOCKER_AUTH
        value: $(tasks.init.results.container-registry-secret)
      runAfter:
      - build-container
      taskRef:
        bundle: quay.io/redhat-appstudio-tekton-catalog/task-inspect-image:0.1@sha256:5531128863a2ac4129680d8bc5ed8ea20960c6f3a3731a561feb47afb7db8fcb
        name: inspect-image
      when:
      - input: $(params.skip-checks)
        operator: in
        values:
        - "false"
      workspaces:
      - name: source
        workspace: workspace
    - name: label-check
      runAfter:
      - inspect-image
      taskRef:
        bundle: quay.io/redhat-appstudio-tekton-catalog/task-label-check:0.1@sha256:2cabc7f183c5f089b827a5ac2450fef80be325480fbd2fb322ddb1e0feeb5f7d
        name: label-check
      when:
      - input: $(params.skip-checks)
        operator: in
        values:
        - "false"
      workspaces:
      - name: workspace
        workspace: workspace
    - name: optional-label-check
      params:
      - name: POLICY_NAMESPACE
        value: optional_checks
      runAfter:
      - inspect-image
      taskRef:
        bundle: quay.io/redhat-appstudio-tekton-catalog/task-label-check:0.1@sha256:2cabc7f183c5f089b827a5ac2450fef80be325480fbd2fb322ddb1e0feeb5f7d
        name: label-check
      when:
      - input: $(params.skip-checks)
        operator: in
        values:
        - "false"
      workspaces:
      - name: workspace
        workspace: workspace
    - name: deprecated-base-image-check
      params:
      - name: BASE_IMAGES_DIGESTS
        value: $(tasks.build-container.results.BASE_IMAGES_DIGESTS)
      taskRef:
        bundle: quay.io/redhat-appstudio-tekton-catalog/task-deprecated-image-check:0.2@sha256:bf1a1cad85bb896e920f0f7ff5dda2f885b76f2617934f72e7954565cd50df49
        name: deprecated-image-check
      when:
      - input: $(params.skip-checks)
        operator: in
        values:
        - "false"
      workspaces:
      - name: test-ws
        workspace: workspace
    - name: roxctl-scan
      params:
      - name: image 
        value: $(tasks.build-container.results.IMAGE_URL)
      - name: image_digest
        value: $(tasks.build-container.results.IMAGE_DIGEST)
      runAfter:
      - build-container
      taskSpec:
        results:
        - name: CVE_SCAN_RESULT
          description: roxctl scan result
        - name: TEST_OUTPUT
          description: roxctl scan test output
        steps:
          - name: roxctl-image-scan
            # image: redhat/ubi8
            image: quay.io/lrangine/crda-maven:11.0
            env:
              - name: ROX_API_TOKEN
                valueFrom:
                  secretKeyRef:
                    name: roxsecrets
                    key: rox_api_token
              - name: ROX_CENTRAL_ENDPOINT 
                valueFrom:
                  secretKeyRef:
                    name: roxsecrets
                    key: rox_central_endpoint
            script: |
              #!/usr/bin/env bash
              echo "ROX_CENTRAL_ENDPOINT: " + $ROX_CENTRAL_ENDPOINT
              echo "ROX_API_TOKEN: " + $ROX_API_TOKEN
              jq --version
              echo "is jq here?"
              echo "Getting roxctl"
              curl -k -L -H "Authorization: Bearer $ROX_API_TOKEN" https://$ROX_CENTRAL_ENDPOINT/api/cli/download/roxctl-linux --output ./roxctl
              chmod +x ./roxctl 
              echo "## Scanning image $(params.image)@$(params.image_digest)"
              ./roxctl image scan --insecure-skip-tls-verify -e $ROX_CENTRAL_ENDPOINT --image $(params.image)@$(params.image_digest) --output json  > roxctl_output.json
              more roxctl_output.json
              jq -rce \
              '{vulnerabilities:{
              critical: (.result.summary.CRITICAL),
              high: (.result.summary.IMPORTANT),
              medium: (.result.summary.MODERATE),
              low: (.result.summary.LOW)
              }}' roxctl_output.json | tee $(results.CVE_SCAN_RESULT.path)              
              echo "## Go to https://$ROX_CENTRAL_ENDPOINT/main/vulnerability-management/image/$(params.image_digest) to check more info"
              TEST_OUTPUT="Details in the logs"
              echo "${TEST_OUTPUT}" | tee $(results.TEST_OUTPUT.path)
    - name: sast-snyk-check
      params:
      - name: SNYK_SECRET
        value: $(params.snyk-secret)
      runAfter:
      - clone-repository
      taskRef:
        bundle: quay.io/redhat-appstudio-tekton-catalog/task-sast-snyk-check:0.1@sha256:58f288a86ae7e1a2fff416d11720521effcf8e9b410355080a2b8a9bb8ae587c
        name: sast-snyk-check
      when:
      - input: $(params.skip-checks)
        operator: in
        values:
        - "false"
      - input: $(params.snyk-secret)
        operator: notin
        values:
        - ""
      workspaces:
      - name: workspace
        workspace: workspace
    - name: clamav-scan
      params:
      - name: image-digest
        value: $(tasks.build-container.results.IMAGE_DIGEST)
      - name: image-url
        value: $(tasks.build-container.results.IMAGE_URL)
      - name: docker-auth
        value: $(tasks.init.results.container-registry-secret)
      runAfter:
      - build-container
      taskRef:
        bundle: quay.io/redhat-appstudio-tekton-catalog/task-clamav-scan:0.1@sha256:2c8dbe8aa7c0fa126a9c84e7590c4e901bcfeec6dde4ccbffda4c493cefb43ed
        name: clamav-scan
      when:
      - input: $(params.skip-checks)
        operator: in
        values:
        - "false"
    - name: sbom-json-check
      params:
      - name: IMAGE_URL
        value: $(tasks.build-container.results.IMAGE_URL)
      - name: IMAGE_DIGEST
        value: $(tasks.build-container.results.IMAGE_DIGEST)
      runAfter:
      - build-container
      taskRef:
        bundle: quay.io/redhat-appstudio-tekton-catalog/task-sbom-json-check:0.1@sha256:9a232f343d6397bfaf9620b6e63ce6943e256ad30da93cf8e9de3ca63ada7717
        name: sbom-json-check
      when:
      - input: $(params.skip-checks)
        operator: in
        values:
        - "false"
    workspaces:
    - name: workspace
    - name: git-auth
      optional: true
  workspaces:
  - name: workspace
    volumeClaimTemplate:
      metadata:
        creationTimestamp: null
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: 1Gi
      status: {}
  - name: git-auth
    secret:
      secretName: '{{ git_auth_secret }}'
status: {}
